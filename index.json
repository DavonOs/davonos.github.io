[{"content":"欢迎来到这个Hugo使用系列教程，将教你如何使用一个叫 Hugo 的简单静态网站生成器，从头开始建立你自己的博客网站\u0026ndash;免费的!。\nHugo，世界上最快的网站建设框架。\n它是为绝对的初学者准备的，会尽可能为你详细地介绍一切。目标是让你了解如何创建你自己的第一个Hugo博客网站，掌握构建 Hugo 网站的基础知识，并在结束后尽可能地定制它。\n什么是Hugo？ Hugo 是非常简单的一个静态网站生成器，因为它是以单一的二进制文件分发的\u0026ndash;这是Go程序的众多好处之一。它需要一个源文件目录，并在其上运行一个构建过程，以生成一个纯粹的静态网站。\nHugo 的独特之处在于其无与伦比的构建速度和围绕布局(layouts)、分类(taxonomies)和内容(content)的严格约定。它是一个静态网站生成器，为Let\u0026rsquo;s Encrypt，1Password，Linode和 digital.gov 等知名网站提供支持。\n我们将学习哪些技术？ Hugo：一个生成实际页面的工具，当人们访问你的网站时，他们会看到这些页面！我们将讨论Hugo的细节，学习如何使用Hugo的基础知识。如果你有一个问题没有得到解决，请查看他们的文档，它有你需要知道的一切。 Markdown：用来写博文的语言。它是一种非常简约和容易学习的语言，专门为内容作者设计。 HTML：将被用于我们的模板。这是Hugo用来生成我们文章和页面布局的代码。 CSS：用来使我们的网站漂亮的语言。如果没有CSS，大多数网页看起来就像90年代初的东西。 我需要什么？ 你最起码需要一台运行Mac、Linux或Windows的电脑\u0026ndash;以及一些互联网！\n我们也强烈建议你下载一个专门用于编写代码的文本编辑器。我们推荐VS Code，一个来自微软的非常流行的文本编辑器\u0026ndash;当然使用任何代码文本编辑器也可以工作。\n安装 Installation 在我们开始之前，让我们在电脑上安装一些工具，这些工具将帮助我们建立我们的网站。\nHugo CLI\n首先，我们将安装Hugo命令行界面（CLI）。Hugo CLI将帮助我们生成我们的项目文件夹，并为我们提供一个开发服务器，这样我们就可以在没有任何真正的服务器的情况下在我们的网站上工作。\nMacOS|Linux\n如果你使用macOS或Linux，那么Homebrew是安装Hugo最简单的方法。一旦你安装了Homebrew，就可以运行：\nbrew install hugo 如果你并没有安装Homebrew。前往Hugo发布页面，找到hugo_extended_xxxx_Linux-64bit.tar.gz 文件。x代表的是版本号，会有所不同。点击该链接，下载压缩文件，并将压缩文件解压到你希望项目运行的文件夹中。\n如果你看到应用程序不能被打开，因为它来自一个不明身份的开发者，请到系统偏好-\u0026gt;安全和隐私-\u0026gt;常规。你应该看到一个选项，点击Hugo应用程序旁边的 \u0026ldquo;允许\u0026rdquo;。\nWindows\n与其他操作系统相比，Windows有一些额外的步骤，但在Windows的官方安装页面上有明确的记录。按照这些说明进行，完成后再回来看看。\n如果你是在Windows上，那么Chocolatey软件包管理器就是你的选择，运行：\nchoco install hugo-extended -confirm 如果没有安装，同样可以前往Hugo发布页面，找到hugo_extended_xxxx_windows-64bit.tar.gz 下载压缩文件并解压到你希望运行的文件夹中。\n任何用于编辑代码的文本编辑器都是好的，但建议下载使用 VSCode，因为它，适用于任何操作系统，有广泛的扩展库，使开发更快。\n让我们检查一下，打开一个新的终端，输入 hugo version 以检查 Hugo 版本\n如果打印出一个版本号，说明安装成功，您就可以开始了！\n如果没有，请查阅 Hugo 文档 或访问 Hugo 社区论坛 。\n设置您的 Hugo 网站 生成站点 打开你的终端程序（或Windows上的命令行程序），导航到你希望你的 Hugo 项目所在的目录并运行以下命令：\ncd hugo hugo new site my-blog Congratulations! Your new Hugo site is created in X:\\Hugo\\my-blog. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. 一个名为my-blog的新文件夹将在你的根目录文件夹中生成，这是Hugo为你的网站建立的脚手架。\n在你最喜欢的代码编辑器中打开你的my-blog文件夹，浏览一下内容，你应该能看到以下目录：\nmy-blog ├── archetypes | └── default.md ├── content ├── data ├── layouts ├── static ├── themes └── config.toml 这些目录在这个阶段可能对你没有任何意义，如果你现在不了解它们，也不要着急。我们会在本教程的过程中使用它们，这将建立起熟悉感。\narchetypes - 定义了新内容的默认元数据（也称为正面内容）。对于这个系列，你不需要担心原型问题。 config.toml - 为你即将蓬勃发展的Hugo网站编写配置文件。 content 你的页面内容（通常是markdown）就放在这里。 data - csv、json、xml或toml文件，可以像只读数据库一样被访问。 layouts - 为你的内容提供页面模板。 data - 你所有不需要处理的资源（通常是图像、字体、pdf等）。 theme - 用一个现有的主题来启动你的Hugo网站。(我们不会在这个系列中使用主题）。 启动开发服务器 现在我们将启动我们的开发服务器。开发服务器是一个在你的计算机上运行的本地服务器，严格用于开发目的。它将你的程序托管在一个端口上，你可以在浏览器中访问该网站。\n在你站点根目录中打开你的终端，运行这个命令：hugo server\n这意味着在1313端口启动一个本地服务器，你可以通过你的网络浏览器进入 http://localhost:1313/（默认地址）访问该网站。你应该看到一个空白的白色页面，因为我们还没有添加任何东西。\n每次你对你的代码进行修改时，这个服务器会自动重新启动，你的网络浏览器也会重新加载!\nMarkdown简介 学习Markdown的基础知识，这是一种用于编写内容的语言。\n在我们开始开发我们新的花哨的网站之前。我们要学习一下Markdown。\nMarkdown是一种用于编写内容的语言。内容可以是任何东西，比如博客文章、食谱、书籍、文档等等。Markdown然后被转换为像HTML一样的代码，可以被浏览器理解，比如Chrome或Firefox在屏幕上显示。\n它非常简单易学，它使我们能够一致和轻松地格式化我们的内容，这意味着所有的页面标题和字幕看起来都一样，所有的引号和段落看起来都一样，所有的列表看起来都一样。\nMarkdown的部分放在其他教程里\nTemplating HTML模板是Hugo的核心，在本节中，我们将介绍启动网站所需的基础知识。\nHTML Introuduction HTML简介 学习如何用元素和属性从头开始编写HTML。\nHTML模板是Hugo的核心，在我们开始接触Hugo模板之前，我们将先对HTML做一个简单的概述，它是所有模板的基础语言。\n什么是HTML？ HTML是用来描述网页布局的语言。它允许我们把按钮、链接、文本、图像和视频放到一个页面中。\n要开始尝试使用HTML和本概述中所涉及的内容，请在你的桌面上创建一个名为index.html的文件，并在VSCode中打开该文件，同时在你的网络浏览器中打开该文件。\nElements（元素） HTML有许多元素，它们描述了我们想在页面上显示的内容。例如，有一个段落元素，它看起来像这样：\n\u0026lt;p\u0026gt;Your sentence here\u0026lt;/p\u0026gt; 继续写在你创建的index.html文件中。保存该文件，然后在你的网络浏览器中打开它，看看你的段落。\n我们将在下面讨论主要的元素，并随时在你的index.html文件中测试每一个元素。记得每次修改后都要保存，并重新加载你的浏览器窗口以查看你的修改。\nHeadings（标题） 标题用于在你的网页上创建更大的文本标题。例如，在这个页面上，有些文字比较大，因为它是下面内容的标题。要创建一个标题，你需要写：\n\u0026lt;h1\u0026gt;Heading 1\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;元素创建了最大的标题，但你可以一直到\u0026lt;h6\u0026gt;的子标题。\n\u0026lt;h1\u0026gt;Heading 1\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Heading 2\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Heading 3\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;Heading 4\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;Heading 5\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;Heading 6\u0026lt;/h6\u0026gt; h2将比h1略小，h3比h2略小，以此类推\u0026hellip;\u0026hellip;\nParagraph（段落） 段落元素用于显示没有格式化的基本文本。\n\u0026lt;p\u0026gt;I am a paragraph\u0026lt;/p\u0026gt; Images（图像） 图像元素用于显示图像。\n\u0026lt;img src=\u0026#34;/path/to/my/image.jpg\u0026#34; /\u0026gt; img元素必须有一个src属性，（我们将在下面讨论属性），但src属性代表source，它必须是你电脑上的图像文件的路径或互联网上图像的网址。\n来吧，在你的电脑上保存一张图片，放在你的index.html旁边，并尝试在屏幕上显示它。\n图片也可以有一个alt属性，即alternate的缩写，这些属性用于在图片无法正常加载时显示文本，或者用于使用语音辅助技术的人在浏览网站时显示文本，因此alt文本将被大声读给用户听。\n\u0026lt;img src=\u0026#34;bird.jpg\u0026#34; alt=\u0026#34;bird flying through the sky\u0026#34; /\u0026gt; Lists（列表） 列表是用来显示一组项目的。它们看起来像这样。\n我是一个列表项 我是一个列表项 我是一个列表项 或者像这样:\n我是第一 我是第二 我是第三 第一个列表可以这样做。\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I am a list item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I am a list item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I am a list item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt;代表无序列表，当顺序不重要时，应该使用它。如果顺序很重要，你可以用\u0026lt;ol\u0026gt;来表示有序列表。\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;I am first\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I am second\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I am third\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; Links（链接） 链接在你的页面上创建一个可点击的链接。这个链接可以把用户带到你想要的任何地方，如另一个网站或你网站上的另一个页面，甚至只是当前页面的另一个滚动位置。\n\u0026lt;a href=\u0026#34;https://google.com\u0026#34;\u0026gt;I am a link to Google\u0026lt;/a\u0026gt; \u0026lt;a\u0026gt;元素代表锚，href属性是目标。\n你也可以通过包含一个目标属性，使新链接在浏览器中自动打开一个新标签。\n\u0026lt;a href=\u0026#34;https://google.com\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Click to open in a new tab\u0026lt;/a\u0026gt; 你也可以让链接打开用户默认的邮件应用程序，向特定地址发送电子邮件。\n\u0026lt;a href=\u0026#34;mailto:test@gmail.com\u0026#34;\u0026gt;Send me an email\u0026lt;/a\u0026gt; Divs（分区） Divs用于将其他元素组合在一起。这使得拥有数千种元素的大型网页能够被合理地组织起来。\n除了在Divs之间添加新行之外，Divs不提供格式化。\n\u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Welcome\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;My name is Bob\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;https://youtube.com\u0026#34;\u0026gt;Check out my youtube channel!\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; Attributes（属性） 属性是用来向元素传递额外信息的。我们在上面已经看到了很多例子，比如src和href，但还有几十个属性可以使用，每个元素都可以有自己的特定属性。\n要了解所有可用的元素和属性，请查看w3schools html教程以获得更多信息。\n在进入下一课之前，先尝试用许多不同的元素创建一个完整的网页，先不要担心造型问题，让它看起来漂亮。\nTemplate Syntax 模板语法 关于Hugo的模板语法，你需要知道的一切。\n基础知识 Hugo模板是添加了额外语法的HTML文件，使其更加动态。它允许我们根据内容为我们生成HTML代码，而不是为每篇文章手动编写代码。在HTML文件中访问Hugo的特殊功能的方法，我们需要写的是{{ }}，在这些大括号内我们写Hugo代码。\nVariables 变量 Hugo会根据当前屏幕上显示的模板类型，在模板中注入一堆有用的变量。访问这些变量的方法是通过添加大括号，然后在变量名称上加一个点，像这样：{{ .VariableNameHere }}。\n我们经常会写这样的代码：\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;来动态地设置我们的页面标签标题。\n在接下来的章节中，我们会经常看到这种语法，它对Hugo至关重要。我们将在后面的章节中复习所有重要的变量注入。\nFuctions 函数 Hugo还提供了许多函数，我们可以在我们的模板中使用。函数与变量不同，因为它们根据输入改变输出。\n例如，如果我们使用add函数，\u0026lt;p\u0026gt;{{ add 1 2 }}\u0026lt;/p\u0026gt;那么输出将是\u0026lt;p\u0026gt;3\u0026lt;/p\u0026gt;，输出将根据我们输入的数字而改变。这与变量不同，因为变量并不根据输入而变化，因为变量没有输入。\nLogic 逻辑 Hugo允许在模板中使用基于逻辑的基本操作，如if语句和loops。\n条件运算符 Hugo为我们提供了一些特殊的操作符来进行条件渲染。if, else, with, or and, 都是用来决定在我们的模板中渲染哪些元素的。\n有许多不同的方法来使用这些运算符，完整的文档可以在这里找到，但我们也会在本课程的其余部分看到许多例子。\nLoops 循环 循环是任何编程语言或框架的一个重要特征。它允许在许多项目中重复使用逻辑。\n我们可以使用range操作符，通过Hugo在注入模板的数据上进行循环，例如页面列表或标签或类别的列表。\n\u0026lt;ul\u0026gt; {{ range $list }} \u0026lt;li\u0026gt;{{ . }}\u0026lt;/li\u0026gt; \u0026lt;!-- The . represents an element in $list variable .代表$list变量中的一个元素 --\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; 上述内容的输出将是：\n\u0026lt;!-- This output assumes the $list variable held 3 items with the text below 这个输出假设$list变量有3个项目，文本如下--\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Item 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Item 2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Item 3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 这是我们需要了解的关于Hugo模板的大部分内容，以便继续进行下面的章节。\nBaseof Pages 基准页 了解Hugo的 baseof 页面如何被用于每个模板。\n现在我们将开始学习Hugo，我们的静态网站生成器。在这一页，我们将学习baseof.html模板。\n什么是baseof.html？ 在开始解释之前，我想让你在你新的hugo项目中的layouts文件夹内创建一个名为_default的文件夹。然后，在里面创建一个名为baseof.html的文件。\n你的文件目录结构现在应该是这样的：\nmy-blog ├── archetypes | └── default.md ├── content ├── data ├── layouts | └── _default | └── baseof.html ├── static ├── themes └── config.toml 打开新的baseof.html文件，粘贴以下片段：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ block \u0026#34;title\u0026#34; . }} {{ .Site.Title }} {{ end }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ block \u0026#34;main\u0026#34; . }} \u0026lt;!-- The part of the page that begins to differ between templates --\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 现在这个文件里有很多代码，我们将解释每一部分。\n第一行：\u0026lt;！DOCTYPE html\u0026gt;\n这是一个文档类型的声明，它告诉浏览器里面有什么样的代码，这样浏览器就知道如何阅读它，并将它转换成用户在屏幕上可以看到的东西。\n下一个区块是\u0026lt;html\u0026gt;元素，这个元素应该包含在每个页面上，它是根元素。其他每个元素都会在这个根元素里面。\n我们看到的下一个元素是\u0026lt;head\u0026gt;元素，这个元素被用来存放关于页面的额外元数据。\nHead 头部 存储在\u0026lt;head\u0026gt;内的元素在屏幕上是不可见的，但浏览器和谷歌等搜索引擎会读取这些元素来索引你的页面。\nTitle 标题 头部也用于存储信息，如页面标题，通过使用\u0026lt;title\u0026gt;元素。标题内的文本用于你在浏览器中的标签文本。如果你现在看看你的网络浏览器窗口，看看顶部的标签，你会看到描述页面的文字，这是由title元素控制的。如果没有提供标题，则只显示页面的URL。\nMeta 元 还有许多不同的\u0026lt;meta\u0026gt;元素，也可以添加到你的头部。这些元元素有些是给你的浏览器阅读的，有些是给抓取你网站的搜索引擎阅读的。\nBody 主体 \u0026lt;body\u0026gt;元素在\u0026lt;head\u0026gt;之后，它是容纳所有其他元素的第一个元素，用于在屏幕上实际显示东西。\n我们在上一节学到的关于HTML的所有元素都可以放在\u0026lt;body\u0026gt;元素中，它们将被显示在屏幕上。\nComment 注释 还有一种方法可以在HTML中写注释，使用的语法是\u0026lt;！--你的注释在这里--\u0026gt;，这些只是供开发人员使用。你可以在这里写任何你想写的东西，浏览器和搜索引擎会忽略它。没有人会看到它，除非他们在看代码。\nTemplate Blocks 模板区块 在普通的HTML文件中，你写元素，并在元素里面写数据，显示在屏幕上\u0026ndash;但如果你的网站有30个页面，甚至1000个页面呢？我们需要为每个页面重复写同样的代码吗？当他们只想在博客上介绍他们最喜欢的新食物时，没有人愿意写代码。\n答案是否定的。我们不必在每次想改变网站内容的时候都写代码。这就是Hugo的意义所在，它允许我们分别编写HTML模板和内容，并让Hugo不费吹灰之力地将它们无缝地拼接起来。\n我相信你已经注意到上面的片段中这些奇怪的双大括号，它们看起来像这样。{{这里的代码}}。这些是Hugo特有的，它将使我们把这些HTML文件变成更多的动态文件，可以作为很多不同内容的模板。\n在上面的片段中，我们看到我们的第一个模板语法叫做block。我们可以使用这些块作为内容的占位符。这将使我们能够生成无限量的页面，其布局完全相同，但里面的文字和信息完全不同。\n在这个片段中，我们定义了 两个block ，并给它们起了名字，这样我们就可以在其他模板中引用它们，这样Hugo就知道如何将模板拼接起来。\nTitle Block 标题块 第一个块是标题块 {{block \u0026quot;title\u0026quot;. }，它位于我们的\u0026lt;title\u0026gt;元素内。这将允许我们以后为我们博客的不同部分制作模板，并为每个模板使用不同的标题。\nMain Block 主块 主块{{block \u0026quot;main\u0026quot;. }}是用于在屏幕上显示元素的块，它可以在不同的页面上改变。主块之外的任何东西都不会在页面之间改变（除非它是一个不同的块）。\n还要注意的是，像main这样的块名是任意的，你可以给这些块起任何你喜欢的名字。\n如果你还没有完全理解区块，请不要担心。我们会有更多关于如何使用它们的例子，而且会更有意义。\nHomepage 主页 我们将一起创建的第一个真正的页面是我们的主页。\n如果你没有运行你的本地Hugo开发服务器，现在就在你的终端运行hugo server命令来启动你的网站。当你运行该命令时，请确保你在你的my-blog文件夹内。\nIndex.html 要创建一个主页，首先在layouts文件夹中创建一个名为index.html的文件。\n你的文件夹结构现在应该看起来像这样：\nmy-blog ├── archetypes | └── default.md ├── content ├── data ├── layouts | ├── _default | | └── baseof.html | └── index.html ├── static ├── themes └── config.toml 在你的代码编辑器中打开index.html文件，粘贴以下代码：\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div\u0026gt; {{ range first 5 .Site.RegularPages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }} 我们将讨论这一切意味着什么，但首先，你应该保存你的文件，并打开你的浏览器到http://localhost:1313，你应该看到一个白色的页面，上面有一个大标题说。我的新Hugo网站。\n这是你的新网站的标题，可以通过编辑你项目中的config.toml文件来改变它。\n继续修改config.toml文件中的title，保存你的修改，看你的网站在浏览器中以你的新标题更新。\nMain block 现在我们看到在第1行的片段中，我们以{{ define \u0026quot;main\u0026quot; }}开始，最后一行是{{ end }}，这两个声明之间的所有内容都将放在baseof.html的 main block 内。\n如果你不记得了，在我们的baseof.html模板里面，我们有一个看起来像这样的块：{{ block \u0026quot;main\u0026quot; . }} {{end}}。所以现在我们知道如何在其他模板的块内注入不同的模板。\n这就是Hugo让我们不在每个页面上重复代码的方式。\nTitle 在上面的片段中，我们还看到{{ .Title }}，这是从你的config.toml中提取的标题。Hugo会在你的模板中注入很多不同的数据供你访问，几乎所有config.toml中的数据都可以用于显示或逻辑判断，如语言选择或元数据。\nPage range 页面范围 在标题之后，我们看到了新的东西\u0026ndash;range block（范围块）。范围块是用来在许多项目上循环的。在这个例子中，我们正在循环浏览我们项目中content文件夹中的所有内容页，并将它们显示为一个摘要。现在，我们的content文件夹中没有任何文件，所以这个范围没有输出任何东西。\n为了测试这个范围块是否工作，我们将创建我们的第一个博客文章文件：\nFirst Blog Post 在content文件夹内创建一个名为post的文件夹。然后，创建一个名为my-first-post.md的文件。\n你的文件夹结构现在应该是这样的：\nmy-blog ├── archetypes | └── default.md ├── content | └── posts | └── my-first-post.md ├── data ├── layouts | ├── _default | | └── baseof.html | └── index.html ├── static ├── themes └── config.toml 打开my-first-post.md文件，粘贴以下内容：\n--- title: \u0026#39;My first post\u0026#39; date: \u0026#39;2020-08-01\u0026#39; --- Hello world! 这是一个markdown文件，它是我们为网站创建内容和博文的方式。我们将在下一节中详细介绍markdown。\nSummary Template 摘要模板 现在你可能期望在你的主页上看到你的新博文。但你还不应该，因为我们还没有告诉hugo如何呈现一篇博文的摘要。这就是我们的范围块里面的{{ .Render \u0026quot;summary\u0026quot; }}的片段。\n创建一个名为summary.html的文件，并把它放在layouts/_default文件夹中。\n你的文件夹结构现在应该是这样的：\nmy-blog ├── archetypes | └── default.md ├── content | └── posts | └── my-first-post.md ├── data ├── layouts | ├── _default | | ├── summary.html | | └── baseof.html | └── index.html ├── static ├── themes └── config.toml 在这个新的summary.html文件中，粘贴以下内容：\n\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; \u0026lt;div\u0026gt;{{ .Title }}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{ .Summary }}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span\u0026gt;{{ .ReadingTime }} Minutes\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;{{ .Date.Format \u0026#34;Jan 2, 2006\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;{{ .WordCount }} Words\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; 现在，当我们回到我们的网络浏览器，看看我们的主页：我们应该看到一个链接到我们创建的第一个帖子。\n它还不是很美观，但我们以后会对它进行修改。\n如果你点击这个链接，你应该得到一个404页面未找到的错误，这是因为我们还没有创建显示完整帖子的布局。\nSingle Pages 单页 了解用于显示单个文章的单页模板\n在我们开始写很棒的博客文章之前，我们需要创建一个显示这些文章的布局。\n现在，当我们点击主页上的链接时，我们会看到一个404错误。让我们来解决这个问题。\nSingle.html 在layouts/_default文件夹下创建一个名为single.html的文件。\n你的项目结构应该是这样的：\nmy-blog ├── archetypes | └── default.md ├── content | └── posts | └── my-first-post.md ├── data ├── layouts | ├── _default | | ├── summary.html | | ├── single.html | | └── baseof.html | └── index.html ├── static ├── themes └── config.toml 打开新的single.html文件并粘贴以下内容：\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt; \u0026lt;article\u0026gt; {{ .Content }} \u0026lt;/article\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;aside\u0026gt; \u0026lt;div\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h4\u0026gt;{{ .Date.Format \u0026#34;Mon Jan 2, 2006\u0026#34; }}\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;{{ .WordCount }} Words\u0026lt;/h5\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; {{ with .PrevInSection }} \u0026lt;a class=\u0026#34;previous\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; {{.Title}}\u0026lt;/a\u0026gt; {{ end }} {{ with .NextInSection }} \u0026lt;a class=\u0026#34;next\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; {{.Title}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; {{ end }} 在解释上述片段的细节之前，继续保存，并访问你在本地主机上运行的网站。如果你现在点击主页上的链接，你应该被引导到一个真正的页面，上面有关于帖子的细节。\n我们现在可以看到，这个single.html布局是为一次显示一个帖子而做的。无论帖子里有什么样的内容，Hugo都会用这个布局来显示它。\n如果你编辑my-first-post.md文件并在其中添加一些文字，你会看到服务器更新并显示新的内容。\nTitle标题 在single.html布局中，我们使用Hugo为我们注入的{{ .Title }}变量来显示我们文章的标题。这是直接取自markdown前面的内容，这是在markdown文件顶部的奇怪的元数据。\nContent 我们也显示文章的内容。内容是markdown文件中位于前言部分下面的所有内容。\n我们通过Hugo给我们的内容变量来访问这些数据，像这样：{{ .Content }}，它将自动把我们的markdown转换成HTML。这就是为什么内容作者使用Markdown而不是HTML来写博文的原因，因为Markdown写起来更快，而且计算机很容易把它转换成更复杂的HTML代码在浏览器中显示。\nDate 日期 我们也在我们的单页布局中显示帖子的日期。Hugo从我们的markdown文件的前面内容中获取它，并允许我们使用.Date.Format函数以任何我们喜欢的方式来格式化它。\n如果你有一篇日期为2017-03-03T14:15:59-06:00的博客文章，那么下面的表格显示了如果你使用第1列的格式，它在第2列会被格式化成什么。\nFormat Output “Monday, January 2, 2006” Friday, March 3, 2017 “Mon Jan 2 2006” Fri Mar 3 2017 “January 2006” March 2017 “2006-01-02” 2017-03-03 “Monday” Friday 请注意，第1列中的数值不应该被改变。星期一、一月、二月和2006年是特殊的值，只是用于格式化。在真正的HTML生成中，它们将被替换成你的文章前言中的正确日期。\n有关日期格式化的更多细节，请访问Hugo日期格式文档页面。\nHugo有几十个函数可用于模板内部，但我们在本课程中只涉及几个基本的函数。\nWord Count 字数统计 Hugo也会在我们的模板中注入一些信息，比如，我们的帖子的字数，阅读该帖子所需的时间等等。\n要访问字数，我们可以在一个单页模板中这样写：{{ .WordCount }}。\n我们可以在Hugo关于页面变量的完整文档中看到所有可用的页面变量。\n下一篇和上一篇 Hugo还可以让你知道文件夹中的下一篇文章是哪一篇。这使我们可以在我们的帖子底部创建链接，以链接到下一篇和上一篇帖子。Hugo会自动按日期对我们的帖子进行排序，所以我们不必担心这个问题。但是，如果我们想要一个特定的顺序，我们可以在我们的文章前台添加一个权重字段weight，Hugo会根据这个值来排序。权重的数字越低，它的排名就越高。\n为了创建下一个和上一个链接，我们使用{{ with }}语法，它在显示里面的代码之前自动检查变量是否存在，然后通过{{ . }}语法提供变量的上下文。\nLists Pages 列表页 了解如何使用列表页模板来显示Hugo中的多个项目。\n现在，我们有一个主页，显示我们最近写的5篇文章\u0026ndash;当我们点击链接时，它会把我们带到该文章的全页面视图。\n但是，如果我们想看到我们所有文章的列表呢？\n这就是Hugo的列表模板的用处。\nTemplate 模板 在/layouts/_default中创建一个名为list.html的文件。\n我们的文件夹结构现在应该是这样的：\nmy-blog ├── archetypes | └── default.md ├── content | └── posts | └── my-first-post.md ├── data ├── layouts | ├── _default | | ├── summary.html | | ├── single.html | | ├── list.html | | └── baseof.html | └── index.html ├── static ├── themes └── config.toml 打开新的list.html文件，粘贴以下代码：\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }} 你会注意到，这与我们的主页模板非常相似，但有一个很大的区别。\n我们的主页模板使用前5个函数来呈现我们的前5个帖子，而在这个模板中，我们不使用这个函数\u0026ndash;所以我们将显示 所有 的帖子。\n为了验证这个模板是否有效，保存你的修改并访问你的本地开发服务器，地址是localhost:1313/posts。\n如果你的开发服务器运行在一个不同的端口上（运行hugo serve后输出），那么用你的端口号替换1313。\nSummary 摘要 你可能还注意到，我们在这个页面上也重复使用了summary.html模板。这可以确保我们在主页上的格式与我们的帖子列表页完全一样，因为我们使用的是完全相同的代码。\n关于路径的说明 你可能想知道为什么我们必须在浏览器中进入/posts来查看我们的帖子。嗯，这是因为我们把帖子放在内容文件夹中的帖子文件夹里。\nHugo的内容文件夹很特别，因为它将根据里面的文件夹和文件名来创建路径。如果我们把帖子放在一个叫做recipes的文件夹里，那么在我们的浏览器中要看到所有的菜谱，我们就需要访问/recipes路径。\n只要内容文件夹内有一个文件夹，Hugo就会使用list.html模板。\n关于你可以在列表页中做什么的更多信息，请查看Hugo关于列表模板的文档。\n404页面 当没有找到给定URL的内容时，创建一个默认显示。\nHugo在建立我们的网站时生成了一堆URL。Hugo通过分析我们的content文件夹和layouts文件夹来完成这一工作。\n但有时用户在访问我们的网站时，会转到一个不存在的URL。那么，当这种情况发生时，我们要显示什么呢？\n大多数网站都会显示一个默认的404页面，404是当网络服务器无法找到所请求的东西时使用的http状态代码。在这种情况下，网络服务器不能找到浏览器正在寻找的页面。\n404模板 为了给找不到的页面显示一些默认信息，在layouts中创建一个404.html文件。\n你的文件夹结构现在应该是这样的：\nmy-blog ├── archetypes | └── default.md ├── content | └── posts | └── my-first-post.md ├── data ├── layouts | ├── _default | | ├── summary.html | | ├── single.html | | ├── list.html | | └── baseof.html | ├── 404.html | └── index.html ├── static ├── themes └── config.toml 打开404.html文件并粘贴以下片段：\n{{ define \u0026#34;main\u0026#34;}} \u0026lt;main\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Go Home\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }} 在我们的案例中，我们将只显示一个写着 Go Home的页面，如果他们点击它\u0026ndash;它将把他们带回我们的主页。\n测试 你现在可能正试图通过保存你的修改并进入一个在你的浏览器中不存在的路径来测试，你可能会困惑为什么没有显示Go Home的信息。\n这是因为Hugo的开发服务器不会自动显示这个模板。要测试它是否可用，你可以访问 localhost:1313/404.html。\n在本课程的 优化部分 ，我们将讨论如何配置我们的网络服务器，以便在没有找到页面时自动提供404模板。\nPartials 了解Hugo Partials，以创建可重复使用的组件，在不同的模板中共享。\nHugo提供了一个强大的功能，叫做 Partials ，它允许我们创建可重复使用的小模板，可以在大的页面模板中使用。\n在本课中，我们将在网站的顶部创建一个导航栏，这个导航栏对所有页面都是一样的，我们将使用一个Partials来实现。\nNavbar 导航栏 在你的layouts文件夹中创建一个名为partials的文件夹。在新的partials文件夹中，创建一个名为navbar.html的文件。\n你的文件夹结构现在应该是这样的：\nmy-blog ├── archetypes | └── default.md ├── content | └── posts | └── my-first-post.md ├── data ├── layouts | ├── _default | | ├── summary.html | | ├── single.html | | ├── list.html | | └── baseof.html | ├── partials | | └── navbar.html | ├── 404.html | └── index.html ├── static ├── themes └── config.toml 打开新的navbar.html文件，粘贴以下代码：\n\u0026lt;nav\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt; {{ $.Site.Title }} \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt; Home \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/posts\u0026#34;\u0026gt; Posts \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; 现在我们需要弄清楚如何在每个页面上获得一个导航条。\n好在我们使用的是Hugo，我们已经有了每个页面都使用的baseof.html模板，所以我们可以修改我们的baseof.html模板并在\u0026lt;body\u0026gt;中添加{{partial \u0026quot;navbar.html\u0026quot;. }}到\u0026lt;body\u0026gt;中，让这个新的导航条显示在每个页面上。\n我们新修改的baseof.html文件现在看起来应该是这样的：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ block \u0026#34;title\u0026#34; . }} {{ .Site.Title }} {{ end }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ partial \u0026#34;navbar.html\u0026#34; . }} {{ block \u0026#34;main\u0026#34; . }} \u0026lt;!-- The part of the page that begins to differ between templates --\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 现在，如果我们保存我们的修改，并在我们的浏览器中访问我们本地运行的网络服务器，我们应该看到每个页面的顶部都有一个新的导航条，使我们能够轻松地导航到我们的主页和帖子页面，无论我们当前访问的是哪个页面。\nfooter 页脚 让我们也为我们的网站创建一个footer。页脚通常用于显示版权文本和其他不太重要的页面的链接。在我们的例子中，我们将只显示当前的年份和版权。\n在我们新的partials文件夹中创建一个名为footer.html的文件。\n你的文件夹结构现在应该是这样的：\nmy-blog ├── archetypes | └── default.md ├── content | └── posts | └── my-first-post.md ├── data ├── layouts | ├── _default | | ├── summary.html | | ├── single.html | | ├── list.html | | └── baseof.html | ├── partials | | ├── footer.html | | └── navbar.html | ├── 404.html | └── index.html ├── static ├── themes └── config.toml 打开footer.html文件，粘贴以下片段：\n\u0026lt;footer\u0026gt; \u0026lt;p\u0026gt; Copyright \u0026amp;copy; {{ now.Format \u0026#34;2006\u0026#34; }} {{ $.Site.Title }} | All rights reserved. \u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; 然后编辑baseof.html，将Partial内容放在\u0026lt;body\u0026gt;中，就像我们对导航条所做的那样。\n新的baseof文件应该是这样的：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ block \u0026#34;title\u0026#34; . }} {{ .Site.Title }} {{ end }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ partial \u0026#34;navbar.html\u0026#34; . }} {{ block \u0026#34;main\u0026#34; . }} \u0026lt;!-- The part of the page that begins to differ between templates --\u0026gt; {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 如果我们现在在浏览器中访问我们的网站，我们会在底部看到一个漂亮的页脚，上面有当前年份、我们的网站标题和漂亮的版权实体。\n我们得到这个版权圆圈的方法是使用HTML实体代码，\u0026amp;copy;被浏览器转换成你所看到的圆圈标志。\n对于所有可能的HTML实体代码，请查看这个参考网站。\nCSS样式设计 学习如何通过样式设计和格式化使你的网站与众不同。\n自定义CSS 学习如何编写CSS来为你的Hugo网站添加样式\n现在到了真正有趣的部分。我们可以使我们的网站感觉到我们想要的方式。我们可以选择颜色、字体和风格来配合我们的个性。\nCSS是一种专门为HTML元素设计风格的语言，使其看起来像我们想要的那样。\nProperties属性 有超过一百种不同的CSS属性可用，这意味着样式的组合几乎是无限的。我们可以创建前所未有的风格组合\u0026ndash;让我们的网站变得独一无二。\n一些常用的属性有：\nmargin：一个元素周围的空白。 font-family：用于文本的字体。 font-size：字体大小。字体的大小。 font-weight：字体的粗细。 color： 文本的颜色。 background: 背景的颜色，或作为背景的图像。 border：用特定颜色和宽度的线条勾勒一个元素。 text-align：用来决定文本是左对齐、居中还是右对齐。 height：一个元素应该有多高。 width：一个元素应该有多宽。 这些只是一些基本的属性，但有这么多的属性，如果在这里全部写出来就太长了，不如看看这个参考资料，看看所有可用的属性。\nSelectors 选择器 我们有几种不同的方法可以将我们的样式应用到我们的HTML元素，样式标签，类名，或ID。\nStyle Tag 样式标签 开始尝试使用CSS的最快方法是在你的HTML元素上写一个你想要的style属性。\n如果我们有一些文字，我们希望它是 黑色 的背景 白色 的字，我们可以这样做：\n\u0026lt;p style=\u0026#34;color: white; background: black;\u0026#34;\u0026gt;I am some text\u0026lt;/p\u0026gt; 在样式标签中，我们用分号 ; 分隔每个样式。每个样式都有两个部分：属性名称，如color或background，以及值，如white、black、blue或#4287f5。\n使用样式标签的缺点是，我们必须一遍又一遍地写相同的样式，而且没有办法重复使用它们。为了重复使用样式，我们使用class name（类名）。\nClass Names 类名 类名允许我们在HTML文档中创建一个\u0026lt;style\u0026gt;标签，并在其中写入我们的样式，而不是在每个元素中。\n\u0026lt;style\u0026gt; .some-text { color: blue; font-size: 24px; } .box { border: 1px solid red; padding: 30px; height: 45px; width: 45px; text-align: center; } \u0026lt;/style\u0026gt; \u0026lt;p class=\u0026#34;some-text\u0026#34;\u0026gt;I am text\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;I am a box\u0026lt;/div\u0026gt; 正如我们所看到的，我们把classes写在我们的样式标签里面，那么我们就可以在整个HTML文档中多次重复使用同一个样式，让我们不至于重复自己。\n此外，我们也可以将我们的类样式完全写在一个单独的文件中，并给它一个.css扩展名。\n为我们的网站设计样式 创建一个名为style.css的文件，放在你的静态文件夹中。\n你的文件夹结构现在应该是这样的：\nmy-blog ├── archetypes | └── default.md ├── content | └── posts | └── my-first-post.md ├── data ├── layouts | ├── _default | | ├── summary.html | | ├── single.html | | ├── list.html | | └── baseof.html | ├── partials | | ├── footer.html | | └── navbar.html | ├── 404.html | └── index.html ├── static | └── styles.css ├── themes └── config.toml 在VS Code中打开新的style.css文件并粘贴以下内容：\nbody { background: blue; } 这将自动为我们页面上的\u0026lt;body\u0026gt;标签应用一个蓝色背景。\n为了使其发挥作用，我们需要在我们的页面中添加对该文件的引用。\n打开我们的baseof.html模板，在\u0026lt;head\u0026gt;标签内添加这一行（记住\u0026lt;head\u0026gt;是用于元数据）。\u0026lt;link rel=\u0026quot;styleheet\u0026quot; href=\u0026quot;/styles.css\u0026quot;\u0026gt;。\n我们的baseof.html现在看起来应该像这样：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/styles.css\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ block \u0026#34;title\u0026#34; . }} {{ .Site.Title }} {{ end }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ partial \u0026#34;navbar.html\u0026#34; . }} {{ block \u0026#34;main\u0026#34; . }} \u0026lt;!-- The part of the page that begins to differ between templates --\u0026gt; {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 现在，如果我们在浏览器中访问我们的本地开发服务器，我们应该在所有页面上看到一个蓝色的背景。\n这可能是非常刺眼的，所以我们将从style.css文件中删除这个样式，并在下一节介绍Bulma，以帮助我们更快地编写CSS。\nBulma CSS 了解Bulma CSS，以帮助简化CSS开发。\n掌握CSS是出了名的费时费力，但现在有许多不同的库可以帮助你更快地编写CSS，减少错误。\nBulma是流行的CSS库，它带有预制的类，我们可以在我们的HTML元素上使用，使它们看起来更漂亮。这可以减少我们需要编写的CSS的数量。\n添加Bulma 打开baseof.html，在style.css文件上方的头部，添加这一行。\u0026lt;link rel=\u0026quot;styleheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css\u0026quot;\u0026gt;。这是一个指向CDN服务器的链接，该服务器托管了Bulma的CSS文件。\n一旦我们点击保存，一些基本的Bulma样式就会应用到我们的网站上。\n我们的baseof.html应该看起来像：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/styles.css\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ block \u0026#34;title\u0026#34; . }} {{ .Site.Title }} {{ end }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ partial \u0026#34;navbar.html\u0026#34; . }} {{ block \u0026#34;main\u0026#34; . }} \u0026lt;!-- The part of the page that begins to differ between templates --\u0026gt; {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 如果我们现在在浏览器中访问我们的网站，我们会看到样式发生了一些变化，就像应用了一种新字体。\n不要忘记从我们之前创建的自定义样式.css文件中删除background: blue;属性。\n塑造我们的网站 现在我们将开始把Bulma类名应用到我们网站的各种元素中，就像这样：class=\u0026ldquo;bulma class names here\u0026rdquo;。\n因此，我们不需要自己编写类和样式，而是使用Bulma的预制类和样式来完成90%的造型，然后我们仍然可以在Bulma之上添加自己的自定义样式。\n导航条 打开navbar.html部分文件，用下面的片段替换内容：\n\u0026lt;nav class=\u0026#34;navbar is-dark\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-brand\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-item\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt; {{ $.Site.Title }} \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;navbar-start\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-item\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt; Home \u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;navbar-item\u0026#34; href=\u0026#34;/posts\u0026#34;\u0026gt; Posts \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; 这些元素没有改变，但我们为每个元素添加了一些类，使其具有良好的风格。保存这些变化，在浏览器中看看你的新导航条。\n页脚 现在让我们打开footer.html文件，为我们的footer元素添加footer类，像这样。\u0026lt;footer class=\u0026quot;footer has-text-centered\u0026quot;\u0026gt;。\n这只是在文本周围增加了一些空间，并将其置于页面的中央。\nHomepage 现在，我们将对我们的主页进行一些设计。打开index.html模板，用下面的代码替换它：\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;main class=\u0026#34;container\u0026#34;\u0026gt; {{ range first 5 .Site.RegularPages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} \u0026lt;/main\u0026gt; \u0026lt;/section\u0026gt; {{ end }} 这也只是在主要内容周围增加一些间距。关于每个Bulma类到底在做什么的更多细节，请查看Bulma docs。\nList Page 我们将对我们的list.html模板做同样的事情，我们还将为该模板添加一个标题，因为它可以是任何基于内容文件夹中的文件夹名称。\n你的list.html现在应该看起来像这样：\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;main class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34; }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/section\u0026gt; {{ end }} 摘要 现在我们将格式化我们的summary.html模板，以显示一个漂亮的可点击的框，而不是未格式化的蓝色文本。\n将summary.html文件替换为以下内容：\n\u0026lt;a class=\u0026#34;box\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; \u0026lt;h4 class=\u0026#34;title is-4\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h4\u0026gt; \u0026lt;h6 class=\u0026#34;subtitle has-text-grey is-6\u0026#34;\u0026gt;{{ .Summary }}\u0026lt;/h6\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span class=\u0026#34;tag is-link\u0026#34;\u0026gt;{{ .ReadingTime }} Minutes\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tag is-dark\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Jan 2, 2006\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tag is-warning\u0026#34;\u0026gt;{{ .WordCount }} Words\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; 现在我们的主页和我们的列表页将使用那个漂亮的摘要组件。\nSingle 最后，我们将设计我们的single.html模板。由于这是一个博客，我们希望它没有杂乱和干净，所以我们不会添加任何太花哨的东西。\n把single.html替换成以下内容：\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;main class=\u0026#34;container mb-6\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h3 class=\u0026#34;subtitle\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;tag is-link\u0026#34;\u0026gt;{{ .ReadingTime }} Minutes\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tag is-dark\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Jan 2, 2006\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tag is-warning\u0026#34;\u0026gt;{{ .WordCount }} Words\u0026lt;/span\u0026gt; \u0026lt;/h3\u0026gt; \u0026lt;article class=\u0026#34;content\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/article\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;div class=\u0026#34;container content\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {{ with .PrevInSection }} \u0026lt;li\u0026gt;Previous Post: \u0026lt;a class=\u0026#34;previous\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} {{ with .NextInSection }} \u0026lt;li\u0026gt;Next Post: \u0026lt;a class=\u0026#34;next\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; {{ end }} 404 最后，我们将为我们的404页面设计样式\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;main class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;title\u0026#34;\u0026gt;Page not found\u0026lt;/h1\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Go Home\u0026lt;/a\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/section\u0026gt; {{ end }} 现在我们有了一个漂亮的网站，我们可以开始添加我们自己的风格。请随意修改任何元素的类别和样式。实验以获得你喜欢的外观和感觉。\n优化 使你的网站快速有效，这样你的访问者就会留下深刻印象，搜索引擎也会给你留下高排名。\n图像 了解如何使用Hugo来压缩和优化你的图片。\n搜索引擎优化(SEO) 使你的网站能够被谷歌等搜索引擎所访问\nCSS最小化 将Hugo中的CSS文件压缩得更小，使其加载速度更快\nCSS最小化是指删除CSS文件中的大量空白和空行的过程。留白有利于人类轻松阅读代码，但对计算机来说是不必要的，它导致文件的大小比它们需要的大得多，而更大的文件=更慢的下载速度=用户等待的时间很短。\n最小化 Hugo提供了一个对自定义CSS文件进行最小化的功能，就像我们学到的Hugo压缩图片的能力一样。\n之前我们在静态文件夹中创建了一个style.css文件。如果这个文件仍然是空的，那么你不需要做任何事情，但是如果你已经写了一些CSS，请按照下面的步骤进行。\n将style.css文件从静态文件夹中移出，移到assets文件夹中。 打开baseof.html，将\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;/styles.css\u0026quot;\u0026gt;一行替换为以下内容：\n{{ $style := resources.Get \u0026#34;styles.css\u0026#34; | minify | fingerprint }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34;\u0026gt; 现在我们的样式将被Hugo处理，Hugo将在我们构建和部署网站时生成一个新文件，这个新文件将被最小化和指纹化，以避免浏览器缓存问题。\n指纹 指纹功能是为了防止浏览器在我们的CSS被修改时进行缓存。通常情况下，浏览器会下载一个CSS文件，并将其保存在缓存（或内存）中，这样下一个加载相同CSS文件的页面就会加载得更快。浏览器使用文件的名称来做这件事，所以如果名称没有变化，它就不会重新下载该文件。\n但是，如果我们改变了文件中的一些内容，并将其部署到我们的服务器上呢？浏览器不会知道，因为名称是一样的。因此，指纹识别是一种解决这个问题的方法，它在文件名中加入一串随机的数字和字母，这样浏览器就知道什么时候要更新它的缓存。\n我们的style.css文件现在看起来是这样的：style.sdfgj12344sfg.css，当它发生变化时，浏览器会从我们的服务器重新下载它。\n部署 建立并将你的网站部署到云服务器上，这样每个人都可以访问并看到你所创造的东西。\nBuild 建立 构建你网站的生产版本以部署到云端。\n祝贺你创建新的网站! 🎉\n你已经完成了完全从零开始的构建工作，现在是向世界展示它的时候了。\n在我们开始部署我们的服务器之前，我们需要了解构建过程。\nThe Process Hugo的构建过程在理论上很简单，我们在终端运行一个命令，而不是启动一个本地开发服务器，我们告诉Hugo构建一个production站点。\n什么是Production site？它是一个以服务器为中心建立的网站，我们写的每一个代码文件都会被分析和拼接起来，这样它就可以为世界服务了。\nHugo所做的是读取我们content文件夹里模板文件和内容文件的所有内容，并开始将它们合并在一起\u0026ndash;最终的结果是一个文件夹中包含所有需要传输到网络服务器的文件。\nBuild 在运行生产构建之前，确保你在config.toml中的baseURL看起来像这样：baseURL = \u0026quot;/\u0026quot;。\n要运行生产构建，请到你的终端，如果开发服务器正在运行，按ctrl-c取消它，然后写hugo-gc-minify。这将迅速生成你的新网站文件，并把它们放在你的项目的Public文件夹中。如果你愿意，你可以打开它们并探索其输出，但这并不是必须的。\n这些是我们将上传到云端的真正文件。\nNetlify 将您的Hugo网站部署到Netlify的云服务器上。\nNetlify提供了一个免费的网络服务来托管我们所需要的静态文件，它还免费提供了一个漂亮的域名，如[项目名称].netlify.app!\n这是最简单的部署方法，也是我们本课程的首选方法。\n注册 如果您还没有账户，请到Netlify的网站上注册。\n上传文件 一旦你注册，登录，并遵循步骤，前往你的团队页面，在页面的底部应该有一个大的区域，上面写着Want to deploy a new site without connecting to Git? Drag and drop your site folder here.（想在不连接Git的情况下部署一个新网站？把你的网站文件夹拖放到这里。）\n找到我们在上一节中建立的名为public的文件夹，把它拖到屏幕上的这个区域。\nNetlify会部署它并给它一个随机的域名。\n域名 现在你可以通过点击屏幕上方的Domain settings按钮或Settings按钮来设置你自己的域名。\n找到Custom domains部分，点击你的随机域名旁边的options下拉按钮，点击Edit site name，给它你自己的名字，然后点击保存，用显示的域名访问你的新网站。\n如果一切顺利，你的网站应该是活的，你可以开始把它发送给你的朋友了\n如果你不想要你的URL中的.netlify.app部分，你可以付费购买一个真正的域名并按照这些文档进行设置。\nHugo开发主题\n从零构建Hugo主题 Hello-Hugo博客迁移踩坑\nHugo系列-通过配置文件来定制个人站点\nWebStack-Hugo | 一个静态响应式网址导航主题 ","permalink":"https://davonos.github.io/posts/hugo-%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/","summary":"欢迎来到这个Hugo使用系列教程，将教你如何使用一个叫 Hugo 的简单静态网站生成器，从头开始建立你自己的博客网站\u0026ndash;免费的!。\nHugo，世界上最快的网站建设框架。\n它是为绝对的初学者准备的，会尽可能为你详细地介绍一切。目标是让你了解如何创建你自己的第一个Hugo博客网站，掌握构建 Hugo 网站的基础知识，并在结束后尽可能地定制它。\n什么是Hugo？ Hugo 是非常简单的一个静态网站生成器，因为它是以单一的二进制文件分发的\u0026ndash;这是Go程序的众多好处之一。它需要一个源文件目录，并在其上运行一个构建过程，以生成一个纯粹的静态网站。\nHugo 的独特之处在于其无与伦比的构建速度和围绕布局(layouts)、分类(taxonomies)和内容(content)的严格约定。它是一个静态网站生成器，为Let\u0026rsquo;s Encrypt，1Password，Linode和 digital.gov 等知名网站提供支持。\n我们将学习哪些技术？ Hugo：一个生成实际页面的工具，当人们访问你的网站时，他们会看到这些页面！我们将讨论Hugo的细节，学习如何使用Hugo的基础知识。如果你有一个问题没有得到解决，请查看他们的文档，它有你需要知道的一切。 Markdown：用来写博文的语言。它是一种非常简约和容易学习的语言，专门为内容作者设计。 HTML：将被用于我们的模板。这是Hugo用来生成我们文章和页面布局的代码。 CSS：用来使我们的网站漂亮的语言。如果没有CSS，大多数网页看起来就像90年代初的东西。 我需要什么？ 你最起码需要一台运行Mac、Linux或Windows的电脑\u0026ndash;以及一些互联网！\n我们也强烈建议你下载一个专门用于编写代码的文本编辑器。我们推荐VS Code，一个来自微软的非常流行的文本编辑器\u0026ndash;当然使用任何代码文本编辑器也可以工作。\n安装 Installation 在我们开始之前，让我们在电脑上安装一些工具，这些工具将帮助我们建立我们的网站。\nHugo CLI\n首先，我们将安装Hugo命令行界面（CLI）。Hugo CLI将帮助我们生成我们的项目文件夹，并为我们提供一个开发服务器，这样我们就可以在没有任何真正的服务器的情况下在我们的网站上工作。\nMacOS|Linux\n如果你使用macOS或Linux，那么Homebrew是安装Hugo最简单的方法。一旦你安装了Homebrew，就可以运行：\nbrew install hugo 如果你并没有安装Homebrew。前往Hugo发布页面，找到hugo_extended_xxxx_Linux-64bit.tar.gz 文件。x代表的是版本号，会有所不同。点击该链接，下载压缩文件，并将压缩文件解压到你希望项目运行的文件夹中。\n如果你看到应用程序不能被打开，因为它来自一个不明身份的开发者，请到系统偏好-\u0026gt;安全和隐私-\u0026gt;常规。你应该看到一个选项，点击Hugo应用程序旁边的 \u0026ldquo;允许\u0026rdquo;。\nWindows\n与其他操作系统相比，Windows有一些额外的步骤，但在Windows的官方安装页面上有明确的记录。按照这些说明进行，完成后再回来看看。\n如果你是在Windows上，那么Chocolatey软件包管理器就是你的选择，运行：\nchoco install hugo-extended -confirm 如果没有安装，同样可以前往Hugo发布页面，找到hugo_extended_xxxx_windows-64bit.tar.gz 下载压缩文件并解压到你希望运行的文件夹中。\n任何用于编辑代码的文本编辑器都是好的，但建议下载使用 VSCode，因为它，适用于任何操作系统，有广泛的扩展库，使开发更快。\n让我们检查一下，打开一个新的终端，输入 hugo version 以检查 Hugo 版本\n如果打印出一个版本号，说明安装成功，您就可以开始了！\n如果没有，请查阅 Hugo 文档 或访问 Hugo 社区论坛 。\n设置您的 Hugo 网站 生成站点 打开你的终端程序（或Windows上的命令行程序），导航到你希望你的 Hugo 项目所在的目录并运行以下命令：","title":"Hugo 博客开发"},{"content":"访问 Hugo 网站！\nHugo + PaperMod搭建技术博客\n折腾 Hugo \u0026amp; PaperMod 主题 - Dvel\u0026rsquo;s Blog\n在你的 Hugo 站点文件夹内， 运行命令：\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) You may use --branch v7.0 to end of above command if you want to stick to specific release. Read more about git submodules here.\n更新：在Hugo 站点文件目录下运行：git submodule update --remote --merge\n在hugo.yml中添加：theme: PaperMod\n我用的是GitHub Page。\n在GitHub里创建一个仓库，名称叫做你的名字.github.io。\n当我们本地预览没问题了的时候，在终端输入hugo -F --cleanDestinationDir，在public文件夹下就会生成输出文件。\n我们将public文件夹作为GitHub Page的本地仓库，每次生成输出文件就推送到GitHub上，GitHub Page就会自动帮我们部署了。\nGithubAction自动化\n访问您的GitHub仓库。从主菜单选择设置 \u0026gt; Pages。将Source更改为GitHub Actions。\n在本地仓库中创建一个空文件：.github/workflows/hugo.yaml 步骤6 将下面的YAML代码复制并粘贴到您创建的文件中。根据需要更改分支名称和Hugo版本。 .github/workflows/hugo.yaml\n步骤7 使用类似\u0026quot;Add workflow\u0026quot;的提交消息将更改提交到本地仓库，并推送到GitHub。\n从GitHub的主菜单中选择Actions。你会看到如下内容：\n步骤9 当GitHub完成构建和部署您的站点后，状态指示器的颜色将变为绿色。\n步骤10 点击上面的提交消息。您会看到如下内容：\n在部署步骤下，您将看到链接到您的在线站点的链接。\n将来，每当您从本地仓库推送更改时，GitHub都会重新构建您的站点并部署更改。\n配置自定义域名\nsetting→pages→customdomain\n设置子域名，将DNS设置cname指向你的名字.github.io\n","permalink":"https://davonos.github.io/posts/my-first-post/","summary":"访问 Hugo 网站！\nHugo + PaperMod搭建技术博客\n折腾 Hugo \u0026amp; PaperMod 主题 - Dvel\u0026rsquo;s Blog\n在你的 Hugo 站点文件夹内， 运行命令：\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) You may use --branch v7.0 to end of above command if you want to stick to specific release. Read more about git submodules here.\n更新：在Hugo 站点文件目录下运行：git submodule update --remote --merge","title":"我的第一篇文章"},{"content":"Hugo的布局 了解Layouts是如何帮助您设置和重复使用 Hugo 网站的主要结构。\n善于利用Layouts是创建一个易于维护、灵活和繁荣的Hugo网站的关键，因此，让我们看看它们是如何发挥作用的。\n什么是布局（Layouts）？ Layouts 是用于页面上围绕内容的所有 \u0026ldquo;框架\u0026rdquo;。例如，想想一个网站上不同页面之间保持相对不变的所有东西，如页眉和页脚。\n在Hugo中，网站上的每个页面都是一个内容文件。最上面是一小段元数据，叫做front matter，后面是markdown。内容文件的目标是，以其最纯粹的形式存储内容。在内容文件中很少有任何HTML或其他表现逻辑。\n所有用于显示和格式化内容的花哨的HTML都存在于布局中。一个布局可能被用于多个内容页面。例如，在一个项目组合网站上，你可能会对你的“关于”页和服务页面使用相同的布局。其他时候，特别是如果你正在做一些复杂的事情，你可能会有一个布局专门用于一个单独的内容页面，例如一个带有复杂表格的联系页面。\n你的第一页 Your first page Hugo有一个叫做 Page Bundles 的概念，可能很难让你头脑清醒。我们将在这里做最低限度的工作，以使您的网站正常运行。\n默认情况下，内容页使用一种叫做 single（单页）的布局。创建一个确切命名为_index.md的内容文件，包括下划线和所有内容，这是一个特例。(Creating a content file which is named exactly , underscore and all, is the exception to this. )\n这些页面就像它周围页面的目录，默认使用一种叫做 list（列表）的布局。\n就像一本好的非小说类书籍一样，从目录开始是一个很好的做法。您将为网站的主页执行此操作。\n如果这一切听起来令人困惑，那么它实际上比听起来简单得多。在\\content目录下创建一个名为_index.md的文件，内容如下：\n--- title: Home --- Hello, I\u0026#39;m a ferocious lion. --- 是之前提到的元数据或 front matter。我们将在今后的课程中讨论这个问题。\n您的第一个布局 Your first layout Hugo 有一个层次结构来确定用于content_d文件的布局。最后的退路是在 _default 目录中寻找一个布局。(The last fallback is looking for a layout in the directory.）让我们为主页创建默认列表布局。\n在 /layouts/目录中创建一个新的文件夹，名为 _default，在里面创建 list.html，内容如下：\n\u0026lt;!Doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ .Page.Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 这些 {{ *** }} 部分是使用Hugo模板从我们的内容文件（_index.md）中渲染内容，我们很快会介绍。\n好了， 这是在你的Hugo网站上通过布局呈现的真实内容。让我们用你网站上的第二个页面来庆祝一下。\n您的第二个布局 让我们在你的网站上弄第二个页面。创建：/content/about.md（注意，我们在这里没有使用下划线）\n--- title: About --- I\u0026#39;m learning Hugo, one step at a time. about.md默认会寻找一个名为single的布局。\n我们可以把/layouts/_default/list.html克隆到/layouts/_default/single.html中，这样就可以正常工作了，但你将不得不维护同一个布局的两个非常相似的版本。我们希望减少重复，并尽可能地使我们的生活更轻松。\n相反，在/layouts/_default/baseof.html创建一个新的布局，内容如下：\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ .Page.Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ block \u0026#34;main\u0026#34; . }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 这与list布局几乎相同，只有一个小的变化。我们现在没有输出{{ .Content }}，而是有一个主 \u0026ldquo;块\u0026rdquo;。这个块是一个占位符，其他布局可以用它来只指定页面的那一部分。\n让我们用你的列表布局来做这件事。将/layouts/_default/list.html里的内容替换为：\n{{ define \u0026#34;main\u0026#34; }} {{ .Content }} {{ end }} 用完全相同的代码创建/layouts/_default/single.html。\n试着进入http://localhost:1313/about/，看看你的新的关于页面。\n添加样式 这是一门Hugo课程，所以我们不打算进入任何CSS。但是，您和我都同意默认浏览器样式还有很多不足之处。我不仅会给你一个样式表，它还会是一个 Sass 样式表，以便在您扩展网站时易于维护。\n我们已经有一个叫做static的目录，所有的静态资源都在这里。如果我们使用一个普通的CSS文件，这将是放置它的地方。我们使用的是Sass，它需要被处理成一个CSS文件。\n在我们网站的根部创建一个名为 /assets/ 的目录。这是需要某种形式的处理的资源将住在这里。在assets中，创建一个名为sass的目录。这是我们的.scss文件的位置。让我们在/assets/sass/main.scss创建一个主文件，内容如下：\nbody { width: 400px; margin: 0 auto; font-family: sans-serif; } nav ul { list-style: none; padding: 3px 5px; background: #111; a { color: #fff; text-decoration: none; \u0026amp;:hover { text-decoration: underline; } } li { display: inline; } } footer { background: #f2f2f2; padding: 2px 2px; font-size: .7em; text-align: center; } #map { height: 300px; } 我们还需要在我们的HTML中引用样式表。打开/layouts/_default/baseof.html，在\u0026lt;/title\u0026gt;下面插入以下内容：\n{{ $style := resources.Get \u0026#34;sass/main.scss\u0026#34; | resources.ToCSS | resources.Minify }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34;\u0026gt; 这告诉Hugo建立.scss文件并在一个样式表标签中输出链接。\n你会注意到这将适用于 list 和 single 布局。我们之前所做的工作已经派上用场了! 你可能需要重新启动你的 hugo serve 以便在你的浏览器中看到这些变化。\n下一步是什么？\n目前，访问 \u0026ldquo;关于\u0026rdquo; 页面的唯一方法是直接导航到它。在下一课，我们将使用Hugo局部添加网站导航。\nHugo 的局部模板 Hugo partials 在这个Hugo教程中，学习如何用Partials将你的Hugo页面分解成更小的 \u0026ldquo;组件\u0026rdquo;。\n在本课中，我们将在网站的顶部创建一个导航栏，这个导航栏对所有页面都是一样的，我们将使用一个局部来实现。\nPartial的想法很简单：它是一个可以包含在布局中的文件，以减少重复或简单地隐藏一些复杂性。你将用一个局部模板来为你的网站添加一个导航条。虽然你可以把这个逻辑直接添加到你的 baseof.html 中，但有时把一个布局分割成较小的局部是很好的，这样你就不需要处理一个2000行的文件了。\n你的第一个Partial 在你的layouts目录下创建一个partials文件夹，所以最终路径将是/layouts/partials/。在里面创建nav.html，内容如下：\n\u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/about/\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; 这就是已经处理好的导航。现在是时候把它纳入你的布局中了。打开/layouts/_default/baseof.html，在\u0026lt;body\u0026gt;下面添加以下内容：\n{{ partial \u0026#34;nav.html\u0026#34; }} 在Go中，你的单引号对字符串没有好处，只有双引号才能指定一个字符串。\n渲染你的页面，就可以了。\n你的第二个Partial 让我们尝试另一个场景来展示Partial的力量。\n我们将进一步简化 baseof.html，把 \u0026lt;head\u0026gt; 的内容移到一个Partial。创建 /layouts/partials/meta.html，内容如下：\n\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ print .Page.Title }}\u0026lt;/title\u0026gt; {{ $style := resources.Get \u0026#34;sass/main.scss\u0026#34; | resources.ToCSS | resources.Minify }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34;\u0026gt; 在这个部分，我们有一些变量需要当前页面的上下文。幸运的是，传递当前页面的上下文可以用一个字符来完成。\n打开/layouts/_default/baseof.html，用以下内容替换\u0026lt;head\u0026gt;的内容。\n{{ partial \u0026#34;meta.html\u0026#34; . }} 结尾处的那个小 . 是传递当前页面的上下文，它允许部分打印出当前页面的标题。你会经常在你的Hugo网站中看到这种情况。\nhugo模板的基础知识 模板化 Go模板是Hugo中使用的灵活的模板语言。在这一课中，我们将了解Go模板的基本概念，并看看你如何在你的网站上使用它。\n通过Hugo模板，你可以控制你的页面是如何呈现的。你可以使用变量，在数组上循环，检查条件，并运行函数。把它看作是一种简单的编程语言，以帮助建立你网站上的页面。你布局中的那些大括号{{ }}，就是Hugo模板。\n什么是front matter Font matter 是你的内容文件顶部的一个元数据片段。有些元数据将是专门为Hugo而设的。例如，设置一个布局，或表明当前页面是一个草稿。其他形式的元数据将是针对你的网站的，例如，表明在页面上使用哪种类型的英雄，或你最喜欢的五种食物的列表。\nFront matter 的内容是以一个小的YAML片段的形式出现在内容文件的顶部。我们在索引页和关于页上都看到过这种形式。\n它可能看起来不大，但我们可以在我们的布局中使用Hugo的模板来引用这个front matter。\n什么是Hugo模板化？ Hugo使用Go模板作为其布局中的模板语言。一旦你掌握了它，它就很容易了。与Hugo中的许多事情一样，有时展示比讲述更容易。\nHugo模板化的例子 输出一个字符串 \u0026lt;!-- Go模板是一个普通的HTML页面。当你想执行一段代码时，你可以使用双大括号，像这样：--\u0026gt; \u0026lt;p\u0026gt;A Go template is a normal HTML page. When you want to execute a piece of code, you can use double curly braces like this: {{ \u0026#34;Hello!\u0026#34; }}.\u0026lt;/p\u0026gt; Front matter的输出 \u0026lt;!-- You can reference a variable from your front matter in a layout with .Params. For example, you could output the title on your pages with: 你可以在布局中用.Params来引用你Front matter的一个变量。例如，你可以在你的页面上输出标题用：--\u0026gt; \u0026lt;title\u0026gt;{{ .Params.title }}\u0026lt;/title\u0026gt; 站点配置的输出 \u0026lt;!-- Sometimes you\u0026#39;ll want to set a variable globally in your config.toml. Hugo has already initalized a title in your config.toml. You can access a variable from your global config with site. For example: 有时你会想在config.toml中设置一个全局变量。 Hugo已经在你的config.toml中设置了一个标题。你可以从你的全局配置中用site.访问一个变量。比如说： --\u0026gt; \u0026lt;title\u0026gt;{{ .Params.title }} | {{ .Site.title }}\u0026lt;/title\u0026gt; 条件 \u0026lt;!-- We might want to check if the front matter title exists. If it exists, output it; if not, use the global config title. 我们可能想检查一下前面的标题是否存在。如果它存在，就输出它；如果不存在，就使用全局配置的标题。--\u0026gt; {{ if isset .Params \u0026#34;title\u0026#34; }} \u0026lt;title\u0026gt;{{ .Params.title }}\u0026lt;/title\u0026gt; {{ else }} \u0026lt;title\u0026gt;{{ .Site.title }}\u0026lt;/title\u0026gt; {{ end }} 设置并输出一个变量 \u0026lt;!-- variables at set with a $ sign. For example: 变量在设置时带有$符号。例如：--\u0026gt; {{ $favorite_food := \u0026#34;Gazelle\u0026#34; }} {{ $favorite_food }} 循环 \u0026lt;!--In Go, an array that can change size is called a slice. You can iterate over an array or slice using range. 在Go中，一个可以改变大小的数组被称为切片。 你可以用range来遍历一个数组或切片。--\u0026gt; {{ $best_friends := slice \u0026#34;pumbaa\u0026#34; \u0026#34;timon\u0026#34; \u0026#34;nala\u0026#34; \u0026#34;rafiki\u0026#34; }} \u0026lt;ul\u0026gt; {{ range $best_friends }} \u0026lt;li\u0026gt;{{ . }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; Nested Key values 嵌套键值 内容文件：\n--- title: Appearance apperance: eyes: green snoot: boopable whiskers: true limbs: - claws: 5 side: left position: front - claws: 4 side: right position: front - claws: 3 side: left position: back - claws: 5 side: right position: back --- Layouts file：\n\u0026lt;!-- If we want to output all of these variables, we could call .Params.appearance.x for each one. Instead we could use `with` to change the context to \u0026#39;.\u0026#39;. It also has the benefit of checking whether the variable exists and won\u0026#39;t run the block if it doesn\u0026#39;t. 如果我们想输出所有这些变量，我们可以为每个变量调用.Params.appearance.x。相反，我们可以使用`with`来改变上下文为\u0026#39;.\u0026#39;。它还有一个好处，就是检查变量是否存在，如果不存在，就不会运行这个块。 --\u0026gt; {{ with .Params.appearance }} \u0026lt;h3\u0026gt;My top appearance traits\u0026lt;/h3\u0026gt; \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Eyes\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;{{ .eyes }}\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Snoot\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;{{ .snoot }}\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Whiskers\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;{{ .whiskers }}\u0026lt;/dd\u0026gt; {{ with .limbs }} \u0026lt;dt\u0026gt;Claws\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt; \u0026lt;ul\u0026gt; {{ range . }} \u0026lt;li\u0026gt;{{ .position }} {{ .side }} {{ .claws }\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/dd\u0026gt; {{ end }} \u0026lt;/dl\u0026gt; {{ end }} 这些是模板化的基础。在你的Hugo之旅中，你将会使用所有这些概念。你可以浏览一下模板文档，了解一下你还能做什么。\n如果你喜欢保持HTML输出的整洁，你可以使用{{-\u0026lt;/code\u0026gt;和\u0026lt;code\u0026gt;-}}来修剪标签周围的空白。Hugo文档中就有一个很好的例子。\n把它全部放在一起 让我们把我们新的Hugo模板知识付诸行动，为你的网站添加一个包括你的名字和当前年份的页脚。在此基础上，我们将添加一个可选的前台事项字段，你可以用它来隐藏特定页面上的页脚。\n让我们从一个简单的问题开始。你的名字。在你的config.toml中把它作为一个新的键加入。因为这只是这个网站的东西，而不是一个特殊的Hugo术语，我们把它放在params对象下：\n[params] name = \u0026#39;Simba\u0026#39; 现在让我们来创建局部。将footer.html添加到你的layout partials目录，内容如下：\n{{ with .Params.hide_footer }} \u0026lt;!-- No footer here! 这里没有页脚! --\u0026gt; {{ else }} \u0026lt;footer\u0026gt; Website made by {{ .Site.Params.name }} in {{ now.Year }} \u0026lt;/footer\u0026gt; {{ end }} 最后在baseof.html布局中的\u0026lt;/body\u0026gt;之前调用局部：\n{{ partial \u0026#34;footer.html\u0026#34; . }} 为了检查hide_footer前台的工作情况，让我们通过在前台添加这个来关闭about.md页面上的页脚：\nhide_footer: true 运行hugo service，在浏览器中查看你的网站。主页有页脚，而 \u0026ldquo;关于 \u0026ldquo;页却没有。\n在Hugo写博客 Blogging in Hugo 在这个Hugo教程中，你将学习如何用Hugo的内容和布局创建一个博客。\nHugo中的博客相对来说是比较简单的。它包括一个列出所有博客文章的页面，以及一系列带有文章日期的内容页面。这就是它的全部内容。\n创建一个博客列表页 你将在这个例子中看到布局分层是如何工作的。\n在你的/content/目录下创建一个名为post的目录，并在其中创建一个名为_index.md的文件，内容如下：\ntitle: Blog _index.md - 还记得这意味着什么吗？它是一个内容文件，在这种情况下，它将列出你的文章。目前，它将尝试使用/layouts/_default/list.html布局。你不希望使用这个布局，因为这个页面没有任何内容。相反，你要创建一个新的布局，专门用于列出文章。\nHugo布局层次的工作方式是，它将首先寻找一个与当前章节相匹配的布局（将章节视为目录），然后再回到_default中的全局默认值。换句话说，我们可以在layouts目录下创建一个名为post的新目录，并在里面创建list.html，内容如下：\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;h1\u0026gt;My posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; - {{ .Date.Format \u0026#34;January 2, 2006\u0026#34; }} \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 这里有一些新的概念；让我解释一下。\n一个列表页（_index.html）有一个包含其所有子页的数组，变量为.Pages。\n.Date的格式被调用，并被传递一个2006年的随机日期。为什么会这样呢？这是 Go 的一个格式化日期的怪癖。你可以在这里阅读更多关于它的信息。\n.Permalink可以在任何页面上调用，以获得其末端的 URL。如果你想链接到一个页面，它就特别有用。\n这就是我们的列表页所需要的一切。让我们转到一篇文章上。\n创建一个帖子 我们已经完成了最困难的部分。让我们通过创建一些帖子来完成这个博客。\n帖子住在/content/posts目录下，不需要任何特殊的命名规则。我喜欢鼓励的一个建议是在文件名中加入文章的日期。Hugo会完全忽略它，但当你在成百上千的文章中找到一篇文章时，它是有帮助的。\n让我们创建三篇博文，让你开始吧。\n/contents/posts/2022-04-03-i-like-to-roar.md\n--- title: I like to roar date: 2022-04-03 --- Hi, quick update from me. I just want to let everyone know that I like roaring. /contents/posts/2022-04-02-today-i-made-friends.md\n--- title: Today I made friends date: 2022-04-02 --- I got lost in the woods today. Two friends, a Meerkat and a Warthog, found me,sung a song with me and gave my life new meaning. Today was a good day. /contents/posts/2022-04-01-vegan-experiment.md\n--- title: Vegan experiment date: 2022-04-01 --- I tried to become a vegan today. I made it to lunch time and couldn\u0026#39;t bear the sight of another green leaf. Yuck! 就像博客列表页一样，这些帖子将尝试使用/layouts/_default/single.html。让我们在/layouts/posts/single.html创建一个专门用于文章的布局，内容如下：\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;h1\u0026gt;{{ .Params.Title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ .Date.Format \u0026#34;January 2, 2006\u0026#34; }}\u0026lt;/p\u0026gt; {{ .Content }} {{ end }} 最后，让我们把博客添加到导航中。打开/layouts/partials/nav.html，添加另一个项目：\n\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/posts/\u0026#34;\u0026gt;Blog\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 运行hugo serve，在浏览器中打开网站，查看你的杰作。\nUsing Data with Hugo 使用数据文件导入现有数据，或者在这个Hugo教程中拥有管理全局数据的简单方法。\nHugo中的数据文件有点像一个只读的数据库。它的工作方式是你可以把JSON、CSV、YAML、XML或TOML文件放在一个叫做data的目录中，然后用.Site.Data在布局中访问这些数据。如果你想花哨一点，你也可以在构建时从外部来源下载JSON或CSV文件。\n创建你的第一个数据文件 首先，我们要创建一个包含所有你喜欢的度假地点的数据文件。创建/data/vacation_spots.yml，内容如下：\n- name: Masai Mara National Reserve latitude: -1.484751 longitude: 35.101904 - name: Serengeti National Park latitude: -2.333333 longitude: 34.833332 - name: Okavango Delta latitude: -19.304543 longitude: 22.643703 - name: Etosha National Park latitude: -18.855591 longitude: 16.32932 - name: Kidepo Valley Park latitude: 3.882778 longitude: 33.874444 什么是短码？ 为了列出你最喜欢的度假地点，你需要：\n地图软件\u0026ndash;你将使用神奇的OpenStreetMap和Leaflet。 一个标记物的JavaScript列表\u0026ndash;你目前在一个数据文件中拥有这个列表 用于设置地图和标记的JavaScript 一个容纳地图的div 我们可以把所有这些放在一个内容文件中，但这将比我们目前拥有的简单的markdown要复杂得多。如果我们想在另一个页面上再次使用这个地图呢？那就需要复制和粘贴大量的HTML了。\n幸运的是，Hugo有一个答案，它叫做Shortcodes（短码）。短码类似于部分代码，只是你在内容文件中使用它们。Hugo甚至已经内置了一堆。\n你将创建一个短码，可以在任何内容文件中使用，以创建一个带有标记位置的地图。让我们看看它是如何工作的。\n你的第一个短码 在/layouts/中创建一个名为shortcodes的目录，并添加一个名为 vacation_spots.html的文件，内容如下：\n\u0026lt;div id=\u0026#34;map\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\u0026#34; crossorigin=\u0026#34;\u0026#34;/\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\u0026#34; crossorigin=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; let markers = {{ $.Site.Data.vacation_spots }}; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/map.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 这里有几件事情，让我解释一下：\n首先，我们有一个地图元素，它将容纳地图。\n然后我们加载Leaflet的样式表，它将帮助我们在地图上创建漂亮的图钉和弹出式窗口。\n接下来是Leaflet的JavaScript文件。\n接下来是来自你的数据文件的标记物列表。这里它被输出为一个JSON数组。\n最后我们参考/map.js，我们很快就会创建。它负责初始化地图和添加标记。\n让我们添加JavaScript来初始化地图和添加标记。创建/static/map.js，内容如下：\nconst map = L.map(\u0026#39;map\u0026#39;); L.tileLayer(\u0026#39;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0026#39;, {attribution: \u0026#39;\u0026amp;copy; \u0026lt;a href=\u0026#34;https://www.openstreetmap.org/copyright\u0026#34;\u0026gt;OpenStreetMap\u0026lt;/a\u0026gt; contributors\u0026#39;}) .addTo(map); let bounds = []; for (let i = 0; i \u0026lt; markers.length; i++ ) { const marker = L.marker([markers[i].latitude, markers[i].longitude]).addTo(map); marker.bindPopup(markers[i].name); bounds.push([markers[i].latitude, markers[i].longitude]); } map.fitBounds(bounds); 我们不是来学习JavaScript的，所以我把这个留给你来解读（或不解读）。\n下一步是什么？ 这只是你Hugo之旅的开始。你现在已经掌握了建立一个基本的Hugo网站的技能。要继续这个旅程，我推荐一些资源：\nHugo文档是学习Hugo所提供的一切的伟大资源。\nHugo社区论坛对新来者很欢迎。这是一个获得支持和与社区联系的好地方。\nBootstrap到客户可编辑的Hugo网站是一个更高级的Hugo教程，它告诉你如何将一个纯粹的静态网站转换成客户可更新的Hugo网站。\n谢谢你的阅读，祝你Hugo快乐\n参考链接：\nhttps://cloudcannon.com/community/learn/hugo-beginner-tutorial\n","permalink":"https://davonos.github.io/posts/hugo-beginner-tutorial/","summary":"Hugo的布局 了解Layouts是如何帮助您设置和重复使用 Hugo 网站的主要结构。\n善于利用Layouts是创建一个易于维护、灵活和繁荣的Hugo网站的关键，因此，让我们看看它们是如何发挥作用的。\n什么是布局（Layouts）？ Layouts 是用于页面上围绕内容的所有 \u0026ldquo;框架\u0026rdquo;。例如，想想一个网站上不同页面之间保持相对不变的所有东西，如页眉和页脚。\n在Hugo中，网站上的每个页面都是一个内容文件。最上面是一小段元数据，叫做front matter，后面是markdown。内容文件的目标是，以其最纯粹的形式存储内容。在内容文件中很少有任何HTML或其他表现逻辑。\n所有用于显示和格式化内容的花哨的HTML都存在于布局中。一个布局可能被用于多个内容页面。例如，在一个项目组合网站上，你可能会对你的“关于”页和服务页面使用相同的布局。其他时候，特别是如果你正在做一些复杂的事情，你可能会有一个布局专门用于一个单独的内容页面，例如一个带有复杂表格的联系页面。\n你的第一页 Your first page Hugo有一个叫做 Page Bundles 的概念，可能很难让你头脑清醒。我们将在这里做最低限度的工作，以使您的网站正常运行。\n默认情况下，内容页使用一种叫做 single（单页）的布局。创建一个确切命名为_index.md的内容文件，包括下划线和所有内容，这是一个特例。(Creating a content file which is named exactly , underscore and all, is the exception to this. )\n这些页面就像它周围页面的目录，默认使用一种叫做 list（列表）的布局。\n就像一本好的非小说类书籍一样，从目录开始是一个很好的做法。您将为网站的主页执行此操作。\n如果这一切听起来令人困惑，那么它实际上比听起来简单得多。在\\content目录下创建一个名为_index.md的文件，内容如下：\n--- title: Home --- Hello, I\u0026#39;m a ferocious lion. --- 是之前提到的元数据或 front matter。我们将在今后的课程中讨论这个问题。\n您的第一个布局 Your first layout Hugo 有一个层次结构来确定用于content_d文件的布局。最后的退路是在 _default 目录中寻找一个布局。(The last fallback is looking for a layout in the directory.","title":""}]